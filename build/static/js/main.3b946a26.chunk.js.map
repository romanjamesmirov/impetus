{"version":3,"sources":["static/Plus.svg","logo.svg","components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tasks","props","state","activeTasks","inactiveTasks","createTask","bind","toggleTask","newTaskName","prompt","this","setState","e","newActiveTasks","newInactiveTasks","toggledTask","target","textContent","indexOf","splice","unshift","className","length","map","task","index","key","onClick","src","Plus","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,yECA3CD,EAAOC,QAAU,IAA0B,kC,4JCItBC,E,kDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,YAAa,GACbC,cAAe,IAEhB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAPA,E,yDAWlB,IAAME,EAAcC,OAAO,QAC3BC,KAAKC,UAAS,SAAAT,GAAK,MAAK,CAAEE,cAAc,GAAD,mBAAMF,EAAME,eAAZ,CAA2BI,U,iCAGxDI,GACV,IAAIC,EAAc,YAAOH,KAAKR,MAAMC,aAChCW,EAAgB,YAAOJ,KAAKR,MAAME,eAChCW,EAAcH,EAAEI,OAAOC,aACgB,IAAzCJ,EAAeK,QAAQH,IAC1BF,EAAeM,OAAON,EAAeK,QAAQH,GAAc,GAC3DD,EAAiBM,QAAQL,KAC4B,IAA3CD,EAAiBI,QAAQH,KACnCD,EAAiBK,OAAOL,EAAiBI,QAAQH,GAAc,GAC/DF,EAAeO,QAAQL,IAExBL,KAAKC,UAAS,SAAAT,GAAK,MAAK,CACvBC,YAAY,YAAKU,GACjBT,cAAc,YAAKU,S,+BAIX,IAAD,OACR,OACC,yBAAKO,UAAU,cACd,6BAASA,UAAU,gBAClB,4BACoC,IAAlCX,KAAKR,MAAMC,YAAYmB,OACrB,wBAAID,UAAU,uBAAd,6BACAX,KAAKR,MAAMC,YAAYoB,KAAI,SAACC,EAAMC,GAAP,OAC5B,wBAAIC,IAAKD,EAAOJ,UAAU,aACzB,4BAAQM,QAAS,EAAKpB,YAAaiB,SAKxC,6BACA,6BAASH,UAAU,kBAClB,4BACoC,IAAlCX,KAAKR,MAAMC,YAAYmB,QAAoD,IAApCZ,KAAKR,MAAME,cAAckB,OAC9D,wBAAID,UAAU,uBAAd,+BACoC,IAApCX,KAAKR,MAAME,cAAckB,OACxB,wBAAID,UAAU,uBAAd,yBACAX,KAAKR,MAAME,cAAcmB,KAAI,SAACC,EAAMC,GAAP,OAC9B,wBAAIC,IAAKD,EAAOJ,UAAU,aACzB,4BAAQM,QAAS,EAAKpB,YAAaiB,OAGvC,wBAAIH,UAAU,eACb,4BAAQM,QAASjB,KAAKL,YACrB,yBAAKuB,IAAKC,IAAMC,IAAI,uB,GA7DOC,a,YCwBpBC,MAtBf,WACE,OACE,yBAAKX,UAAU,OAeb,kBAAC,EAAD,QCXcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b946a26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Plus.e105d9ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nimport Plus from '../static/Plus.svg'\n\nexport default class Tasks extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tactiveTasks: [],\n\t\t\tinactiveTasks: []\n\t\t}\n\t\tthis.createTask = this.createTask.bind(this)\n\t\tthis.toggleTask = this.toggleTask.bind(this)\n\t}\n\n\tcreateTask() {\n\t\tconst newTaskName = prompt('Task')\n\t\tthis.setState(state => ({ inactiveTasks: [...state.inactiveTasks, newTaskName] }))\n\t}\n\n\ttoggleTask(e) {\n\t\tlet newActiveTasks = [...this.state.activeTasks]\n\t\tlet newInactiveTasks = [...this.state.inactiveTasks]\n\t\tconst toggledTask = e.target.textContent\n\t\tif (newActiveTasks.indexOf(toggledTask) !== -1) {\n\t\t\tnewActiveTasks.splice(newActiveTasks.indexOf(toggledTask), 1)\n\t\t\tnewInactiveTasks.unshift(toggledTask)\n\t\t} else if (newInactiveTasks.indexOf(toggledTask) !== -1) {\n\t\t\tnewInactiveTasks.splice(newInactiveTasks.indexOf(toggledTask), 1)\n\t\t\tnewActiveTasks.unshift(toggledTask)\n\t\t}\n\t\tthis.setState(state => ({\n\t\t\tactiveTasks: [...newActiveTasks],\n\t\t\tinactiveTasks: [...newInactiveTasks]\n\t\t}))\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='Tasks-Page'>\n\t\t\t\t<section className='Active-Tasks'>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{this.state.activeTasks.length === 0\n\t\t\t\t\t\t\t? <li className='Empty-Tasks-Message'>You have no active tasks.</li>\n\t\t\t\t\t\t\t: this.state.activeTasks.map((task, index) => (\n\t\t\t\t\t\t\t\t<li key={index} className='Task-Item'>\n\t\t\t\t\t\t\t\t\t<button onClick={this.toggleTask}>{task}</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</section>\n\t\t\t\t<hr />\n\t\t\t\t<section className='Inactive-Tasks'>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{this.state.activeTasks.length === 0 && this.state.inactiveTasks.length === 0\n\t\t\t\t\t\t\t? <li className='Empty-Tasks-Message'>Add a new task ➡️</li>\n\t\t\t\t\t\t\t: this.state.inactiveTasks.length === 0\n\t\t\t\t\t\t\t\t? <li className='Empty-Tasks-Message'>All tasks are active.</li>\n\t\t\t\t\t\t\t\t: this.state.inactiveTasks.map((task, index) => (\n\t\t\t\t\t\t\t\t\t<li key={index} className='Task-Item'>\n\t\t\t\t\t\t\t\t\t\t<button onClick={this.toggleTask}>{task}</button>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t<li className='Create-Task'>\n\t\t\t\t\t\t\t<button onClick={this.createTask}>\n\t\t\t\t\t\t\t\t<img src={Plus} alt='Plus icon' />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React from 'react';\n\nimport Tasks from './components/Tasks'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <Tasks/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}